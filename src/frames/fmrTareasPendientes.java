/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import accesoDatos.TareaDAO;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import objeto.Tarea;

/**
 *
 * @author PC
 */
public class fmrTareasPendientes extends javax.swing.JFrame {

    TareaDAO tareaDAO;

    /**
     * Creates new form fmrTareasPendientes
     */
    public fmrTareasPendientes() {
        initComponents();
        this.setTitle("Lista de tareas");
        tareaDAO = new TareaDAO();
        this.llenarTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaTareasFinalizadas = new javax.swing.JTable();
        btn_progreso = new javax.swing.JButton();
        btn_pendiente = new javax.swing.JButton();
        btn_ArrowDown = new javax.swing.JButton();
        btn_ArrowUP = new javax.swing.JButton();
        btn_agregarTarea = new javax.swing.JButton();
        btn_finalizar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaTareasPendientes = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaTareasProgreso = new javax.swing.JTable();
        btn_pomodoro = new javax.swing.JButton();
        btn_pomodoro1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaTareasFinalizadas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tablaTareasFinalizadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Estado", "Fecha terminacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaTareasFinalizadas);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 360, 90));

        btn_progreso.setText("En progreso");
        btn_progreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_progresoActionPerformed(evt);
            }
        });
        jPanel1.add(btn_progreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, -1, -1));

        btn_pendiente.setText("Pendiente");
        btn_pendiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pendienteActionPerformed(evt);
            }
        });
        jPanel1.add(btn_pendiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 310, -1, -1));

        btn_ArrowDown.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_ArrowDown.setText("↓");
        btn_ArrowDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ArrowDownActionPerformed(evt);
            }
        });
        jPanel1.add(btn_ArrowDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 40, 40));

        btn_ArrowUP.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_ArrowUP.setText("↑");
        btn_ArrowUP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ArrowUPActionPerformed(evt);
            }
        });
        jPanel1.add(btn_ArrowUP, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 40, 40));

        btn_agregarTarea.setText("Agregar una nueva tarea");
        btn_agregarTarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarTareaActionPerformed(evt);
            }
        });
        jPanel1.add(btn_agregarTarea, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 180, 190, -1));

        btn_finalizar.setText("Finalizar");
        btn_finalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_finalizarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_finalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 310, -1, -1));

        jLabel4.setText("Tareas pendientes");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        jLabel5.setText("Tareas En progreso");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        tablaTareasPendientes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tablaTareasPendientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Estado", "prioridad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaTareasPendientes);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 360, 90));

        jLabel6.setText("Tareas Finalizadas");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, -1, -1));

        tablaTareasProgreso.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tablaTareasProgreso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Estado", "Prioridad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaTareasProgreso);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 360, 90));

        btn_pomodoro.setText("Abrir pomodoro");
        btn_pomodoro.setName(""); // NOI18N
        btn_pomodoro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pomodoroActionPerformed(evt);
            }
        });
        jPanel1.add(btn_pomodoro, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, -1, -1));

        btn_pomodoro1.setText("Actualizar tarea");
        btn_pomodoro1.setName(""); // NOI18N
        btn_pomodoro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pomodoro1ActionPerformed(evt);
            }
        });
        jPanel1.add(btn_pomodoro1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 220, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_progresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_progresoActionPerformed
        this.actualizarEstado(1, 1);
        this.btn_pomodoro.setEnabled(true);
    }//GEN-LAST:event_btn_progresoActionPerformed

    private void btn_ArrowUPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ArrowUPActionPerformed
        this.subirTarea();
    }//GEN-LAST:event_btn_ArrowUPActionPerformed

    private void btn_ArrowDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ArrowDownActionPerformed
        this.bajarTarea();
    }//GEN-LAST:event_btn_ArrowDownActionPerformed

    private void btn_agregarTareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarTareaActionPerformed
        fmrTareas fmrtareas = new fmrTareas(null);
        fmrtareas.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_agregarTareaActionPerformed

    private void btn_pendienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pendienteActionPerformed
        this.actualizarEstado(0, 2);
    }//GEN-LAST:event_btn_pendienteActionPerformed

    private void btn_finalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_finalizarActionPerformed
        int opcion = JOptionPane.showConfirmDialog(this, "Seguro de haber terminado esta tarea?", "Confirmacion", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (opcion == JOptionPane.YES_OPTION) {
            this.actualizarEstado(2, 3);
        }

    }//GEN-LAST:event_btn_finalizarActionPerformed

    private void btn_pomodoroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pomodoroActionPerformed
        if (validarSeleccionado()) {
            try {
                Tarea haciendo = tareaDAO.consultarPorId((Integer) tablaTareasProgreso.getModel().getValueAt(tablaTareasProgreso.getSelectedRow(), 0));
                FmrPomodoro pomodoro = new FmrPomodoro(haciendo);
                pomodoro.setVisible(true);
                this.dispose();
            } catch (Exception ex) {
                Logger.getLogger(fmrTareasPendientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_pomodoroActionPerformed

    private void btn_pomodoro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pomodoro1ActionPerformed
        if (validarSeleccionado()) {
            try {
                Tarea actualiza = tareaDAO.consultarPorId((Integer) tablaTareasPendientes.getModel().getValueAt(tablaTareasPendientes.getSelectedRow(), 0));
                if (actualiza == null) {
                    actualiza = tareaDAO.consultarPorId((Integer) tablaTareasProgreso.getModel().getValueAt(tablaTareasProgreso.getSelectedRow(), 0));
                    
                }
                if (actualiza == null) {
                    JOptionPane.showMessageDialog(this, "Una tarea debe ser seleccionada primero.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    fmrTareas tareas = new fmrTareas(actualiza);
                tareas.setVisible(true);
                this.dispose();
                }
            } catch (Exception ex) {
                Logger.getLogger(fmrTareasPendientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_pomodoro1ActionPerformed

    boolean rowSeleccionado = false;
    int index;
    DefaultTableModel model;

    public void subirTarea() {
        if (rowSeleccionado == false) {
            model = (DefaultTableModel) tablaTareasPendientes.getModel();
            rowSeleccionado = true;
        }

        index = tablaTareasPendientes.getSelectedRow();

        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un fila primero!!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (index > 0) {
            Tarea tarea = new Tarea((int) tablaTareasPendientes.getModel().getValueAt(tablaTareasPendientes.getSelectedRow(), 0));
            tarea.setPrioridad(((int) tablaTareasPendientes.getModel().getValueAt(tablaTareasPendientes.getSelectedRow(), 3)) + 1);
            try {
                tareaDAO.actualizarPrioridad(tarea);
                llenarTabla();
            } catch (Exception ex) {
                Logger.getLogger(fmrTareasPendientes.class.getName()).log(Level.SEVERE, null, ex);
            }
            model.moveRow(index, index, index - 1);
            tablaTareasPendientes.setRowSelectionInterval(index - 1, index - 1);
        }
    }

    public void bajarTarea() {
        if (rowSeleccionado == false) {
            model = (DefaultTableModel) tablaTareasPendientes.getModel();
            rowSeleccionado = true;
        }

        index = tablaTareasPendientes.getSelectedRow();

        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un fila primero!!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (index < model.getRowCount() - 1) {
            Tarea tarea = new Tarea((int) tablaTareasPendientes.getModel().getValueAt(tablaTareasPendientes.getSelectedRow(), 0));
            tarea.setPrioridad(((int) tablaTareasPendientes.getModel().getValueAt(tablaTareasPendientes.getSelectedRow(), 3)) - 1);
            if (tarea.getPrioridad() < 0) {
                JOptionPane.showMessageDialog(this, "La prioridad no debe bajar de 0!!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    tareaDAO.actualizarPrioridad(tarea);
                    llenarTabla();
                } catch (Exception ex) {
                    Logger.getLogger(fmrTareasPendientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            model.moveRow(index, index, index + 1);
            tablaTareasPendientes.setRowSelectionInterval(index + 1, index + 1);
        }
    }

    public String parsearEstado(int var) {
        String estado;
        switch (var) {
            case 0:
                estado = "pendiente";
                break;
            case 1:
                estado = "en progreso";
                break;
            default:
                estado = "terminado";
                break;
        }
        return estado;
    }

    public String parsearFecha(String fecha) {
        String parseada = (fecha.split("T")[0] + " " + fecha.split("T")[1]);
        return parseada;
    }

    public void llenarTabla() {
        try {
            ArrayList<Tarea> listaTareas = tareaDAO.consultar();
            DefaultTableModel modeloTablaPendiente = (DefaultTableModel) this.tablaTareasPendientes.getModel();
            DefaultTableModel modeloTablaProgreso = (DefaultTableModel) this.tablaTareasProgreso.getModel();
            DefaultTableModel modeloTablaFinalizado = (DefaultTableModel) this.tablaTareasFinalizadas.getModel();
            TableRowSorter<DefaultTableModel> ordenPendiente = new TableRowSorter<DefaultTableModel>(modeloTablaPendiente);
            this.tablaTareasPendientes.setRowSorter(ordenPendiente);
            TableRowSorter<DefaultTableModel> ordenProgreso = new TableRowSorter<DefaultTableModel>(modeloTablaProgreso);
            this.tablaTareasProgreso.setRowSorter(ordenProgreso);
            TableRowSorter<DefaultTableModel> ordenFinal = new TableRowSorter<DefaultTableModel>(modeloTablaFinalizado);
            this.tablaTareasFinalizadas.setRowSorter(ordenFinal);

            modeloTablaPendiente.setRowCount(0);
            modeloTablaProgreso.setRowCount(0);
            modeloTablaFinalizado.setRowCount(0);

            for (Tarea tarea : listaTareas) {
                Object[] filaDatos = new Object[4];

                filaDatos[0] = tarea.getId();
                filaDatos[1] = tarea.getNombre();
                filaDatos[2] = parsearEstado(tarea.getEstado());

                switch (tarea.getEstado()) {
                    case 0: {
                        filaDatos[3] = tarea.getPrioridad();
                        modeloTablaPendiente.addRow(filaDatos);
                        break;
                    }
                    case 1: {
                        filaDatos[3] = tarea.getPrioridad();
                        modeloTablaProgreso.addRow(filaDatos);
                        break;
                    }
                    case 2: {
                        filaDatos[3] = parsearFecha(tarea.getFechaDeTerminacion().toString());
                        modeloTablaFinalizado.addRow(filaDatos);
                        break;
                    }
                }

            }

            if (modeloTablaProgreso.getRowCount() != 0) {
                this.btn_pomodoro.setEnabled(true);
            } else {
                this.btn_pomodoro.setEnabled(false);
            }
        } catch (Exception ex) {
            System.out.println(ex.getCause());
        }
    }

    private boolean validarSeleccionado() {
        if (tablaTareasPendientes.getSelectedRow() == -1 && tablaTareasProgreso.getSelectedRow() == -1 && tablaTareasFinalizadas.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Una tarea debe ser seleccionada primero.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }

    public void actualizarEstado(int n, int numTabla) {
        if (validarSeleccionado()) {
            try {
                switch (numTabla) {
                    case 1: {
                        tareaDAO.actualizar(new Tarea((int) tablaTareasPendientes.getModel().getValueAt(tablaTareasPendientes.getSelectedRow(), 0), n));
                        this.llenarTabla();
                        break;
                    }
                    case 2: {
                        tareaDAO.actualizar(new Tarea((int) tablaTareasProgreso.getModel().getValueAt(tablaTareasProgreso.getSelectedRow(), 0), n));
                        this.llenarTabla();
                        break;
                    }
                    case 3: {
                        tareaDAO.actualizar(new Tarea((int) tablaTareasProgreso.getModel().getValueAt(tablaTareasProgreso.getSelectedRow(), 0), n));
                        Tarea tarea = new Tarea((int) tablaTareasProgreso.getModel().getValueAt(tablaTareasProgreso.getSelectedRow(), 0));
                        tarea.setFechaDeTerminacion(LocalDateTime.now());
                        tareaDAO.actualizarFecha(tarea);
                        this.llenarTabla();
                        break;
                    }
                }

            } catch (Exception ex) {
                Logger.getLogger(fmrTareasPendientes.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Hubo un error al actualizar el estado de la tarea", "Error!!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            JOptionPane.showMessageDialog(this, "Tarea actualizada correctamente", "Exito", JOptionPane.INFORMATION_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ArrowDown;
    private javax.swing.JButton btn_ArrowUP;
    private javax.swing.JButton btn_agregarTarea;
    private javax.swing.JButton btn_finalizar;
    private javax.swing.JButton btn_pendiente;
    private javax.swing.JButton btn_pomodoro;
    private javax.swing.JButton btn_pomodoro1;
    private javax.swing.JButton btn_progreso;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tablaTareasFinalizadas;
    private javax.swing.JTable tablaTareasPendientes;
    private javax.swing.JTable tablaTareasProgreso;
    // End of variables declaration//GEN-END:variables
}
